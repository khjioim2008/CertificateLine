<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\InterchangebleCertificateLine-UCOSII-F407V0.2.0]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\InterchangebleCertificateLine-UCOSII-F407V0.2.0</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Tue Apr 14 14:12:49 2020
<BR><P>
<H3>Maximum Stack Usage =        216 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
commandCutStep &rArr; STEPMOTOR_CerAxisMoveRel_CutTim9 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[113]">OS_CPU_SR_Save</a>
 <LI><a href="#[116]">OS_CPU_SR_Restore</a>
 <LI><a href="#[11a]">OSStartHighRdy</a>
 <LI><a href="#[12e]">OSCtxSw</a>
 <LI><a href="#[115]">OSIntCtxSw</a>
 <LI><a href="#[17]">OS_CPU_PendSVHandler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2b]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2b]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2b]">ADC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[13]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2d]">CAN1_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2e]">CAN1_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2f]">CAN1_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2c]">CAN1_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[59]">CAN2_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5a]">CAN2_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5b]">CAN2_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[58]">CAN2_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[7d]">CUTBTN_LONG_PRESS_Handler</a> from main.o(i.CUTBTN_LONG_PRESS_Handler) referenced from main.o(i.initializeHardWare)
 <LI><a href="#[7c]">CUTBTN_PRESS_DOWN_Handler</a> from main.o(i.CUTBTN_PRESS_DOWN_Handler) referenced from main.o(i.initializeHardWare)
 <LI><a href="#[7e]">CUTBTN_PRESS_UP_Handler</a> from main.o(i.CUTBTN_PRESS_UP_Handler) referenced from main.o(i.initializeHardWare)
 <LI><a href="#[6e]">CertificateCom_ReceiveMessage</a> from usecom.o(i.CertificateCom_ReceiveMessage) referenced from usecom.o(i.CertificateCom_Init)
 <LI><a href="#[6f]">CommandScan</a> from commandcore.o(i.CommandScan) referenced from commandcore.o(i.CommandCallBackInit)
 <LI><a href="#[67]">DCMI_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[24]">DMA1_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[25]">DMA1_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[26]">DMA1_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[27]">DMA1_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[28]">DMA1_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[29]">DMA1_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2a]">DMA1_Stream6_IRQHandler</a> from stm32f4xx_it.o(i.DMA1_Stream6_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[48]">DMA1_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[51]">DMA2_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[52]">DMA2_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[53]">DMA2_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[54]">DMA2_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[55]">DMA2_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5d]">DMA2_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5e]">DMA2_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5f]">DMA2_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[16]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[56]">ETH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[57]">ETH_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1f]">EXTI0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[41]">EXTI15_10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[20]">EXTI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[21]">EXTI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[22]">EXTI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[23]">EXTI4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[30]">EXTI9_5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1d]">FLASH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[49]">FMC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[69]">FPU_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[68]">HASH_RNG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[11]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[39]">I2C1_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[38]">I2C1_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3b]">I2C2_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3a]">I2C2_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[62]">I2C3_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[61]">I2C3_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[12]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[10]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6d]">OSTaskSwHook</a> from os_cpu_c.o(i.OSTaskSwHook) referenced from os_cpu_a.o(.text)
 <LI><a href="#[17]">OS_CPU_PendSVHandler</a> from os_cpu_a.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[18]">OS_CPU_SysTickHandler</a> from os_cpu_c.o(i.OS_CPU_SysTickHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[72]">OS_TaskIdle</a> from os_core.o(i.OS_TaskIdle) referenced from os_core.o(i.OS_InitTaskIdle)
 <LI><a href="#[71]">OS_TaskReturn</a> from os_task.o(i.OS_TaskReturn) referenced from os_cpu_c.o(i.OSTaskStkInit)
 <LI><a href="#[73]">OS_TaskStat</a> from os_core.o(i.OS_TaskStat) referenced from os_core.o(i.OS_InitTaskStat)
 <LI><a href="#[5c]">OTG_FS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[43]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[64]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[63]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[66]">OTG_HS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[65]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[83]">PAPEREXITBTN_PRESS_DOWN_Handler</a> from main.o(i.PAPEREXITBTN_PRESS_DOWN_Handler) referenced from main.o(i.initializeHardWare)
 <LI><a href="#[81]">PLASTICBBTN_PRESS_UP_Handler</a> from main.o(i.PLASTICBBTN_PRESS_UP_Handler) referenced from main.o(i.initializeHardWare)
 <LI><a href="#[80]">PLASTICBTN_LONG_PRESS_Handler</a> from main.o(i.PLASTICBTN_LONG_PRESS_Handler) referenced from main.o(i.initializeHardWare)
 <LI><a href="#[7f]">PLASTICBTN_PRESS_DOWN_Handler</a> from main.o(i.PLASTICBTN_PRESS_DOWN_Handler) referenced from main.o(i.initializeHardWare)
 <LI><a href="#[1a]">PVD_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1e]">RCC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[42]">RTC_Alarm_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1c]">RTC_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[f]">Reset_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4a]">SDIO_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3c]">SPI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3d]">SPI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4c]">SPI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[15]">SVC_Handler</a> from stm32f4xx_it.o(i.SVC_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6b]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[1b]">TAMP_STAMP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[31]">TIM1_BRK_TIM9_IRQHandler</a> from stm32f4xx_it.o(i.TIM1_BRK_TIM9_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[34]">TIM1_CC_IRQHandler</a> from stm32f4xx_it.o(i.TIM1_CC_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[33]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[32]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[35]">TIM2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[36]">TIM3_IRQHandler</a> from stm32f4xx_it.o(i.TIM3_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[37]">TIM4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4b]">TIM5_IRQHandler</a> from stm32f4xx_it.o(i.TIM5_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4f]">TIM6_DAC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[50]">TIM7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[44]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[47]">TIM8_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[46]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[45]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4d]">UART4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4e]">UART5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[70]">UART_DMAAbortOnError</a> from stm32f4xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[3e]">USART1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3f]">USART2_IRQHandler</a> from stm32f4xx_it.o(i.USART2_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[40]">USART3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[60]">USART6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[14]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[82]">WORKFINISH_PRESS_DOWN_Handler</a> from main.o(i.WORKFINISH_PRESS_DOWN_Handler) referenced from main.o(i.initializeHardWare)
 <LI><a href="#[19]">WWDG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6c]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[84]">appTaskStart</a> from main.o(i.appTaskStart) referenced from main.o(i.main)
 <LI><a href="#[77]">comTask</a> from main.o(i.comTask) referenced from main.o(i.appTaskStart)
 <LI><a href="#[6]">commandCutMachineSeq</a> from commandcore.o(i.commandCutMachineSeq) referenced 2 times from commandlist.o(.data)
 <LI><a href="#[e]">commandCutStep</a> from commandcore.o(i.commandCutStep) referenced 2 times from commandlist.o(.data)
 <LI><a href="#[5]">commandFlotasmCutMotor</a> from commandcore.o(i.commandFlotasmCutMotor) referenced 2 times from commandlist.o(.data)
 <LI><a href="#[c]">commandHobMotor</a> from commandcore.o(i.commandHobMotor) referenced 2 times from commandlist.o(.data)
 <LI><a href="#[3]">commandLeftChamferMotor</a> from commandcore.o(i.commandLeftChamferMotor) referenced 2 times from commandlist.o(.data)
 <LI><a href="#[1]">commandLeftHobMotor</a> from commandcore.o(i.commandLeftHobMotor) referenced 2 times from commandlist.o(.data)
 <LI><a href="#[7]">commandMachineStep</a> from commandcore.o(i.commandMachineStep) referenced 2 times from commandlist.o(.data)
 <LI><a href="#[d]">commandPIDMotor</a> from commandcore.o(i.commandPIDMotor) referenced 2 times from commandlist.o(.data)
 <LI><a href="#[b]">commandPagingConveyerMotor</a> from commandcore.o(i.commandPagingConveyerMotor) referenced 2 times from commandlist.o(.data)
 <LI><a href="#[a]">commandPagingSeq</a> from commandcore.o(i.commandPagingSeq) referenced 2 times from commandlist.o(.data)
 <LI><a href="#[4]">commandRightChamferMotor</a> from commandcore.o(i.commandRightChamferMotor) referenced 2 times from commandlist.o(.data)
 <LI><a href="#[2]">commandRightHobMotor</a> from commandcore.o(i.commandRightHobMotor) referenced 2 times from commandlist.o(.data)
 <LI><a href="#[8]">commandStampACMotor</a> from commandcore.o(i.commandStampACMotor) referenced 2 times from commandlist.o(.data)
 <LI><a href="#[9]">commandStampSeq</a> from commandcore.o(i.commandStampSeq) referenced 2 times from commandlist.o(.data)
 <LI><a href="#[75]">cutTask</a> from main.o(i.cutTask) referenced from main.o(i.appTaskStart)
 <LI><a href="#[74]">fputc</a> from bsp_usartx.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[6a]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[76]">pagingTask</a> from main.o(i.pagingTask) referenced from main.o(i.appTaskStart)
 <LI><a href="#[78]">readCutButtonIO</a> from bsp_key.o(i.readCutButtonIO) referenced from main.o(i.initializeHardWare)
 <LI><a href="#[7b]">readPaperExitButtonIO</a> from bsp_key.o(i.readPaperExitButtonIO) referenced from main.o(i.initializeHardWare)
 <LI><a href="#[79]">readStampButtonIO</a> from bsp_key.o(i.readStampButtonIO) referenced from main.o(i.initializeHardWare)
 <LI><a href="#[7a]">readWorkFinishButtonIO</a> from bsp_key.o(i.readWorkFinishButtonIO) referenced from main.o(i.initializeHardWare)
 <LI><a href="#[85]">sensorCutFlotasmPostion</a> from bsp_sensor.o(i.sensorCutFlotasmPostion) referenced from runcutmachine.o(i.runCutMachine)
 <LI><a href="#[86]">sensorCutLeftFlotasm</a> from bsp_sensor.o(i.sensorCutLeftFlotasm) referenced from runcutmachine.o(i.runCutMachine)
 <LI><a href="#[89]">sensorCutMachineBehind</a> from bsp_sensor.o(i.sensorCutMachineBehind) referenced from runcutmachine.o(i.runCutMachine)
 <LI><a href="#[88]">sensorCutMachineFront</a> from bsp_sensor.o(i.sensorCutMachineFront) referenced from runcutmachine.o(i.runCutMachine)
 <LI><a href="#[87]">sensorCutRightFlotasm</a> from bsp_sensor.o(i.sensorCutRightFlotasm) referenced from runcutmachine.o(i.runCutMachine)
 <LI><a href="#[8a]">sensorPagingFrictionOrigin</a> from bsp_sensor.o(i.sensorPagingFrictionOrigin) referenced from runpagingmachine.o(i.runPagingMachine)
 <LI><a href="#[8e]">sensorPagingFrictionOutFour</a> from bsp_sensor.o(i.sensorPagingFrictionOutFour) referenced from runpagingmachine.o(i.runPagingMachine)
 <LI><a href="#[8b]">sensorPagingFrictionOutOne</a> from bsp_sensor.o(i.sensorPagingFrictionOutOne) referenced from runpagingmachine.o(i.runPagingMachine)
 <LI><a href="#[8d]">sensorPagingFrictionOutThree</a> from bsp_sensor.o(i.sensorPagingFrictionOutThree) referenced from runpagingmachine.o(i.runPagingMachine)
 <LI><a href="#[8c]">sensorPagingFrictionOutTwo</a> from bsp_sensor.o(i.sensorPagingFrictionOutTwo) referenced from runpagingmachine.o(i.runPagingMachine)
 <LI><a href="#[8f]">sensorPagingRollerOut</a> from bsp_sensor.o(i.sensorPagingRollerOut) referenced from runpagingmachine.o(i.runPagingMachine)
 <LI><a href="#[0]">text</a> from commandcore.o(i.text) referenced 2 times from commandlist.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[6c]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[188]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[90]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[a8]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[189]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[18a]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[18b]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[18c]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[18d]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[f]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[113]"></a>OS_CPU_SR_Save</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appTaskStart
</UL>

<P><STRONG><a name="[116]"></a>OS_CPU_SR_Restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appTaskStart
</UL>

<P><STRONG><a name="[11a]"></a>OSStartHighRdy</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
</UL>

<P><STRONG><a name="[12e]"></a>OSCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[115]"></a>OSIntCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>

<P><STRONG><a name="[17]"></a>OS_CPU_PendSVHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[18e]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[150]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_program
</UL>

<P><STRONG><a name="[18f]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[93]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[190]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[191]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[92]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_Copy
</UL>

<P><STRONG><a name="[157]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_init
</UL>

<P><STRONG><a name="[192]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[94]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[153]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_cmd
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_program
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_job
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_cmd
</UL>

<P><STRONG><a name="[b6]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandScan
</UL>

<P><STRONG><a name="[154]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_cmd
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_program
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_job
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_cmd
</UL>

<P><STRONG><a name="[152]"></a>strtok</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, strtok.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strtok
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_cmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_cmd
</UL>

<P><STRONG><a name="[95]"></a>calloc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, calloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_program
</UL>

<P><STRONG><a name="[97]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[9c]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[9d]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[9e]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEPMOTOR_CerAxisMoveRel
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEPMOTOR_CerAxisMoveRel_CutTim9
</UL>

<P><STRONG><a name="[9f]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEPMOTOR_CerAxisMoveRel
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEPMOTOR_CerAxisMoveRel_CutTim9
</UL>

<P><STRONG><a name="[a0]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEPMOTOR_CerAxisMoveRel
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEPMOTOR_CerAxisMoveRel_CutTim9
</UL>

<P><STRONG><a name="[a1]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEPMOTOR_CerAxisMoveRel
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEPMOTOR_CerAxisMoveRel_CutTim9
</UL>

<P><STRONG><a name="[13d]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEPMOTOR_CerAxisMoveRel
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEPMOTOR_CerAxisMoveRel_CutTim9
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandPagingSeq
</UL>

<P><STRONG><a name="[a3]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEPMOTOR_CerAxisMoveRel
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEPMOTOR_CerAxisMoveRel_CutTim9
</UL>

<P><STRONG><a name="[193]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[14e]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[a5]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[98]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[194]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[a2]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[195]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[99]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[196]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[197]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[a4]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[198]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[9b]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>

<P><STRONG><a name="[9a]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[a6]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>

<P><STRONG><a name="[a7]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[14b]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[91]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[199]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[19a]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[19b]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[13]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>CUTBTN_LONG_PRESS_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(i.CUTBTN_LONG_PRESS_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = CUTBTN_LONG_PRESS_Handler &rArr; continuousCutMem &rArr; STEPMOTOR_CerAxisMoveRel_CutTim9 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;continuousCutMem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.initializeHardWare)
</UL>
<P><STRONG><a name="[7c]"></a>CUTBTN_PRESS_DOWN_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(i.CUTBTN_PRESS_DOWN_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = CUTBTN_PRESS_DOWN_Handler &rArr; manualCutMem &rArr; STEPMOTOR_CerAxisMoveRel_CutTim9 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manualCutMem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.initializeHardWare)
</UL>
<P><STRONG><a name="[7e]"></a>CUTBTN_PRESS_UP_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(i.CUTBTN_PRESS_UP_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CUTBTN_PRESS_UP_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopCutMem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.initializeHardWare)
</UL>
<P><STRONG><a name="[ac]"></a>CertificateCom_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usecom.o(i.CertificateCom_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CertificateCom_Init &rArr; StmCom_SetRecDataCallBack
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StmCom_SetRecDataCallBack
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StmCom_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeHardWare
</UL>

<P><STRONG><a name="[b2]"></a>CertificateCom_RecMsgCallback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usecom.o(i.CertificateCom_RecMsgCallback))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandCallBackInit
</UL>

<P><STRONG><a name="[af]"></a>CertificateCom_Scan</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usecom.o(i.CertificateCom_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CertificateCom_Scan &rArr; StmCom_ScanTask &rArr; StmCom_InScan
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StmCom_ScanTask
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comTask
</UL>

<P><STRONG><a name="[b1]"></a>CommandCallBackInit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, commandcore.o(i.CommandCallBackInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CommandCallBackInit
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CertificateCom_RecMsgCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeHardWare
</UL>

<P><STRONG><a name="[6f]"></a>CommandScan</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, commandcore.o(i.CommandScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = CommandScan &rArr; arg_cmd &rArr; parse_cmd &rArr; create_program &rArr; calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_job
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_job
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_cmd
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_Copy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commandcore.o(i.CommandCallBackInit)
</UL>
<P><STRONG><a name="[b3]"></a>Command_Copy</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, commandutil.o(i.Command_Copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Command_Copy
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandScan
</UL>

<P><STRONG><a name="[b8]"></a>CreateNode</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, steplinkedlist.o(i.CreateNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CreateNode &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insertList
</UL>

<P><STRONG><a name="[2a]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.DMA1_Stream6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = DMA1_Stream6_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[bf]"></a>ENCODER_TIMx_Init</STRONG> (Thumb, 266 bytes, Stack size 8 bytes, bsp_encodertim.o(i.ENCODER_TIMx_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ENCODER_TIMx_Init &rArr; HAL_TIM_Encoder_Init &rArr; HAL_TIM_Encoder_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeHardWare
</UL>

<P><STRONG><a name="[fb]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[bd]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 574 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream6_IRQHandler
</UL>

<P><STRONG><a name="[c3]"></a>HAL_DMA_Init</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CheckFifoParam
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTx_Init
</UL>

<P><STRONG><a name="[df]"></a>HAL_GPIO_Init</STRONG> (Thumb, 466 bytes, Stack size 24 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initMax6675
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initHC4053
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_MspInit
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initMotorPWM
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initMotorIOPushOut
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEPMOTOR_GPIO_Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PagingMachinePIDStep_GPIO_Init
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSensorIO
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_GPIO_Init
</UL>

<P><STRONG><a name="[13c]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pagingConveyerMotorIO
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initMotorIOPushOut
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hobMotorIO
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEPMOTOR_CerAxisMoveRel
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runFlotasmCutMotor
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEPMOTOR_CerAxisMoveRel_CutTim9
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEPMOTOR_GPIO_Init
</UL>

<P><STRONG><a name="[c4]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[c7]"></a>HAL_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeHardWare
</UL>

<P><STRONG><a name="[c9]"></a>HAL_InitTick</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[ca]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[c2]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENCODER_TIMx_Init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_NVIC_DMAx_Init
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cutMachineStep_TIM9_Init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEPMOTOR_TIMx_Init
</UL>

<P><STRONG><a name="[c1]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENCODER_TIMx_Init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_NVIC_DMAx_Init
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cutMachineStep_TIM9_Init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEPMOTOR_TIMx_Init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[c8]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[ce]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 446 bytes, Stack size 16 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[d1]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickInit
</UL>

<P><STRONG><a name="[d0]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[d2]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[cf]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[d3]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1090 bytes, Stack size 16 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[144]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[cb]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[e7]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[e9]"></a>HAL_TIMEx_CommutationCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_CommutationCallback))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[170]"></a>HAL_TIMEx_ConfigBreakDeadTime</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_ConfigBreakDeadTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIMEx_ConfigBreakDeadTime
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initMotorPWM
</UL>

<P><STRONG><a name="[d4]"></a>HAL_TIMEx_PWMN_Stop</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_PWMN_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIMEx_PWMN_Stop &rArr; TIM_CCxNChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initMotorPWM
</UL>

<P><STRONG><a name="[d6]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cutMachineStep_TIM9_Init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEPMOTOR_TIMx_Init
</UL>

<P><STRONG><a name="[d7]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, bsp_stepmotor.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_Base_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[141]"></a>HAL_TIM_Base_Start</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Start))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initMotorPWM
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cutMachineStep_TIM9_Init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEPMOTOR_TIMx_Init
</UL>

<P><STRONG><a name="[d9]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 306 bytes, Stack size 24 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_TIM_ConfigClockSource &rArr; TIM_TI2_ConfigInputStage
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRx_SetConfig
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initMotorPWM
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cutMachineStep_TIM9_Init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEPMOTOR_TIMx_Init
</UL>

<P><STRONG><a name="[c0]"></a>HAL_TIM_Encoder_Init</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Encoder_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_TIM_Encoder_Init &rArr; HAL_TIM_Encoder_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENCODER_TIMx_Init
</UL>

<P><STRONG><a name="[de]"></a>HAL_TIM_Encoder_MspInit</STRONG> (Thumb, 256 bytes, Stack size 32 bytes, bsp_encodertim.o(i.HAL_TIM_Encoder_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_TIM_Encoder_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Init
</UL>

<P><STRONG><a name="[e0]"></a>HAL_TIM_Encoder_Start</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Encoder_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_Encoder_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeHardWare
</UL>

<P><STRONG><a name="[e3]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[e2]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 406 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutationCallback
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[ea]"></a>HAL_TIM_OC_Callback</STRONG> (Thumb, 1408 bytes, Stack size 16 bytes, bsp_stepmotor.o(i.HAL_TIM_OC_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_TIM_OC_Callback &rArr; HAL_TIM_OC_Stop_IT &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Stop_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CC_IRQHandler
</UL>

<P><STRONG><a name="[ec]"></a>HAL_TIM_OC_Callback_TIM9</STRONG> (Thumb, 1408 bytes, Stack size 16 bytes, bsp_stepmotor.o(i.HAL_TIM_OC_Callback_TIM9))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_TIM_OC_Callback_TIM9 &rArr; HAL_TIM_OC_Stop_IT &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Stop_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_BRK_TIM9_IRQHandler
</UL>

<P><STRONG><a name="[ed]"></a>HAL_TIM_OC_ConfigChannel</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_OC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_OC_ConfigChannel &rArr; TIM_OC2_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cutMachineStep_TIM9_Init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEPMOTOR_TIMx_Init
</UL>

<P><STRONG><a name="[e4]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[f2]"></a>HAL_TIM_OC_Start_IT</STRONG> (Thumb, 144 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_OC_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_OC_Start_IT &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEPMOTOR_CerAxisMoveRel
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEPMOTOR_CerAxisMoveRel_CutTim9
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlPIDPagingMachineStep
</UL>

<P><STRONG><a name="[eb]"></a>HAL_TIM_OC_Stop_IT</STRONG> (Thumb, 196 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_OC_Stop_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_OC_Stop_IT &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cutMachineStep_TIM9_Init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEPMOTOR_TIMx_Init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Callback_TIM9
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Callback
</UL>

<P><STRONG><a name="[f3]"></a>HAL_TIM_PWM_ConfigChannel</STRONG> (Thumb, 264 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC2_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initMotorPWM
</UL>

<P><STRONG><a name="[f4]"></a>HAL_TIM_PWM_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_PWM_Init &rArr; HAL_TIM_PWM_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initMotorPWM
</UL>

<P><STRONG><a name="[f5]"></a>HAL_TIM_PWM_MspInit</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, bsp_bdcmotor.o(i.HAL_TIM_PWM_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_PWM_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[e5]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[f6]"></a>HAL_TIM_PWM_Start</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initMotorPWM
</UL>

<P><STRONG><a name="[f7]"></a>HAL_TIM_PWM_Stop</STRONG> (Thumb, 126 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_PWM_Stop &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initMotorPWM
</UL>

<P><STRONG><a name="[e6]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, bsp_encodertim.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[e8]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[fc]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[f8]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 326 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; StmCom_ReceiveComData
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_IT
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[ff]"></a>HAL_UART_Init</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTx_Init
</UL>

<P><STRONG><a name="[100]"></a>HAL_UART_MspInit</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, bsp_usartx.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[104]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeHardWare
</UL>

<P><STRONG><a name="[102]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_UART_RxCpltCallback &rArr; StmCom_ReceiveComData
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StmCom_ReceiveComData
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[105]"></a>HAL_UART_Transmit</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[145]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
</UL>

<P><STRONG><a name="[11]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[165]"></a>Init_PIDStruct</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, pid.o(i.Init_PIDStruct))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlPIDPagingMachineStep
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeHardWare
</UL>

<P><STRONG><a name="[107]"></a>KEY_GPIO_Init</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, bsp_key.o(i.KEY_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = KEY_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeHardWare
</UL>

<P><STRONG><a name="[12]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[109]"></a>OSInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, os_core.o(i.OSInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = OSInit &rArr; OS_InitTaskStat &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookEnd
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookBegin
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTCBList
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitRdyList
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitMisc
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10a]"></a>OSInitHookBegin</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSInitHookBegin))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[112]"></a>OSInitHookEnd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSInitHookEnd))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[bc]"></a>OSIntEnter</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_core.o(i.OSIntEnter))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CC_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_BRK_TIM9_IRQHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream6_IRQHandler
</UL>

<P><STRONG><a name="[be]"></a>OSIntExit</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, os_core.o(i.OSIntExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntCtxSw
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CC_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_BRK_TIM9_IRQHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream6_IRQHandler
</UL>

<P><STRONG><a name="[117]"></a>OSSemCreate</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, os_sem.o(i.OSSemCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[119]"></a>OSStart</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, os_core.o(i.OSStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSStart
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStartHighRdy
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11b]"></a>OSStatInit</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, os_core.o(i.OSStatInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSStatInit &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appTaskStart
</UL>

<P><STRONG><a name="[12f]"></a>OSTCBInitHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTCBInitHook))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[11d]"></a>OSTaskCreate</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, os_task.o(i.OSTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appTaskStart
</UL>

<P><STRONG><a name="[121]"></a>OSTaskCreateExt</STRONG> (Thumb, 170 bytes, Stack size 56 bytes, os_task.o(i.OSTaskCreateExt))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStkClr
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
</UL>

<P><STRONG><a name="[130]"></a>OSTaskCreateHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskCreateHook))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[123]"></a>OSTaskDel</STRONG> (Thumb, 280 bytes, Stack size 16 bytes, os_task.o(i.OSTaskDel))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSTaskDel &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelHook
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Dummy
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskReturn
</UL>

<P><STRONG><a name="[126]"></a>OSTaskDelHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskDelHook))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[131]"></a>OSTaskIdleHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskIdleHook))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
</UL>

<P><STRONG><a name="[127]"></a>OSTaskNameSet</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, os_task.o(i.OSTaskNameSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSTaskNameSet
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
</UL>

<P><STRONG><a name="[132]"></a>OSTaskReturnHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskReturnHook))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskReturn
</UL>

<P><STRONG><a name="[133]"></a>OSTaskStatHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskStatHook))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[128]"></a>OSTaskStkChk</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, os_task.o(i.OSTaskStkChk))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStatStkChk
</UL>

<P><STRONG><a name="[11e]"></a>OSTaskStkInit</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, os_cpu_c.o(i.OSTaskStkInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSTaskStkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[129]"></a>OSTaskSuspend</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, os_task.o(i.OSTaskSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTaskSuspend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appTaskStart
</UL>

<P><STRONG><a name="[6d]"></a>OSTaskSwHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskSwHook))
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_a.o(.text)
</UL>
<P><STRONG><a name="[11c]"></a>OSTimeDly</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, os_time.o(i.OSTimeDly))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pagingTask
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cutTask
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comTask
</UL>

<P><STRONG><a name="[12a]"></a>OSTimeTick</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, os_core.o(i.OSTimeTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSTimeTick
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
</UL>

<P><STRONG><a name="[12b]"></a>OSTimeTickHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTimeTickHook))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>

<P><STRONG><a name="[18]"></a>OS_CPU_SysTickHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, os_cpu_c.o(i.OS_CPU_SysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OS_CPU_SysTickHandler &rArr; OSTimeTick
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[12c]"></a>OS_CPU_SysTickInit</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, main.o(i.OS_CPU_SysTickInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OS_CPU_SysTickInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appTaskStart
</UL>

<P><STRONG><a name="[125]"></a>OS_Dummy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_core.o(i.OS_Dummy))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[124]"></a>OS_EventTaskRemove</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, os_core.o(i.OS_EventTaskRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_EventTaskRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[118]"></a>OS_EventWaitListInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_core.o(i.OS_EventWaitListInit))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>

<P><STRONG><a name="[12d]"></a>OS_MemClr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, os_core.o(i.OS_MemClr))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTCBList
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitEventList
</UL>

<P><STRONG><a name="[10f]"></a>OS_QInit</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, os_q.o(i.OS_QInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OS_QInit
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[120]"></a>OS_Sched</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, os_core.o(i.OS_Sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCtxSw
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[11f]"></a>OS_TCBInit</STRONG> (Thumb, 284 bytes, Stack size 40 bytes, os_core.o(i.OS_TCBInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateHook
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTCBInitHook
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[72]"></a>OS_TaskIdle</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, os_core.o(i.OS_TaskIdle))
<BR><BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskIdleHook
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(i.OS_InitTaskIdle)
</UL>
<P><STRONG><a name="[71]"></a>OS_TaskReturn</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, os_task.o(i.OS_TaskReturn))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OS_TaskReturn &rArr; OSTaskDel &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskReturnHook
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_c.o(i.OSTaskStkInit)
</UL>
<P><STRONG><a name="[73]"></a>OS_TaskStat</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, os_core.o(i.OS_TaskStat))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OS_TaskStat &rArr; OS_TaskStatStkChk &rArr; OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStatHook
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStatStkChk
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(i.OS_InitTaskStat)
</UL>
<P><STRONG><a name="[134]"></a>OS_TaskStatStkChk</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, os_core.o(i.OS_TaskStatStkChk))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OS_TaskStatStkChk &rArr; OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[122]"></a>OS_TaskStkClr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, os_task.o(i.OS_TaskStkClr))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[83]"></a>PAPEREXITBTN_PRESS_DOWN_Handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(i.PAPEREXITBTN_PRESS_DOWN_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PAPEREXITBTN_PRESS_DOWN_Handler &rArr; controlPagingMachine &rArr; controlHobMotor &rArr; hobMotorIO
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlPagingMachine
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlCutMachine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.initializeHardWare)
</UL>
<P><STRONG><a name="[81]"></a>PLASTICBBTN_PRESS_UP_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(i.PLASTICBBTN_PRESS_UP_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PLASTICBBTN_PRESS_UP_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopPlasticMem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.initializeHardWare)
</UL>
<P><STRONG><a name="[80]"></a>PLASTICBTN_LONG_PRESS_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(i.PLASTICBTN_LONG_PRESS_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = PLASTICBTN_LONG_PRESS_Handler &rArr; continuousPlasticMem &rArr; STEPMOTOR_CerAxisMoveRel &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;continuousPlasticMem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.initializeHardWare)
</UL>
<P><STRONG><a name="[7f]"></a>PLASTICBTN_PRESS_DOWN_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(i.PLASTICBTN_PRESS_DOWN_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = PLASTICBTN_PRESS_DOWN_Handler &rArr; manualPlasticMem &rArr; STEPMOTOR_CerAxisMoveRel &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manualPlasticMem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.initializeHardWare)
</UL>
<P><STRONG><a name="[13b]"></a>STEPMOTOR_CerAxisMoveRel</STRONG> (Thumb, 756 bytes, Stack size 96 bytes, bsp_stepmotor.o(i.STEPMOTOR_CerAxisMoveRel))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = STEPMOTOR_CerAxisMoveRel &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runPagingMachine
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manualPlasticMem
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;continuousPlasticMem
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runRollerPaper
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runPagingPaper
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runFlotasmCutMotor
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandMachineStep
</UL>

<P><STRONG><a name="[bb]"></a>STEPMOTOR_CerAxisMoveRel_CutTim9</STRONG> (Thumb, 692 bytes, Stack size 96 bytes, bsp_stepmotor.o(i.STEPMOTOR_CerAxisMoveRel_CutTim9))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = STEPMOTOR_CerAxisMoveRel_CutTim9 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manualCutMem
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlCutMachineSpeed
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;continuousCutMem
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CutMachineSpecialHandle
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCutStep
</UL>

<P><STRONG><a name="[140]"></a>STEPMOTOR_TIMx_Init</STRONG> (Thumb, 212 bytes, Stack size 56 bytes, bsp_stepmotor.o(i.STEPMOTOR_TIMx_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = STEPMOTOR_TIMx_Init &rArr; STEPMOTOR_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Stop_IT
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEPMOTOR_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeHardWare
</UL>

<P><STRONG><a name="[15]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[ae]"></a>StmCom_Init</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, bsp_usartx.o(i.StmCom_Init))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CertificateCom_Init
</UL>

<P><STRONG><a name="[103]"></a>StmCom_ReceiveComData</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, bsp_usartx.o(i.StmCom_ReceiveComData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = StmCom_ReceiveComData
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[b0]"></a>StmCom_ScanTask</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bsp_usartx.o(i.StmCom_ScanTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = StmCom_ScanTask &rArr; StmCom_InScan
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StmCom_InScan
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CertificateCom_Scan
</UL>

<P><STRONG><a name="[ad]"></a>StmCom_SetRecDataCallBack</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, bsp_usartx.o(i.StmCom_SetRecDataCallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StmCom_SetRecDataCallBack
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CertificateCom_Init
</UL>

<P><STRONG><a name="[ab]"></a>StopCutMem</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, runcutmachine.o(i.StopCutMem))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUTBTN_PRESS_UP_Handler
</UL>

<P><STRONG><a name="[6b]"></a>SystemInit</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[31]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.TIM1_BRK_TIM9_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = TIM1_BRK_TIM9_IRQHandler &rArr; HAL_TIM_OC_Callback_TIM9 &rArr; HAL_TIM_OC_Stop_IT &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Callback_TIM9
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.TIM1_CC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = TIM1_CC_IRQHandler &rArr; HAL_TIM_OC_Callback &rArr; HAL_TIM_OC_Stop_IT &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Callback
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM3_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = TIM3_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TIM5_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.TIM5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = TIM5_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[d8]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 184 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[e1]"></a>TIM_CCxChannelCmd</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_CCxChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Start
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Stop
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEPMOTOR_CerAxisMoveRel
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEPMOTOR_CerAxisMoveRel_CutTim9
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Stop_IT
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Start_IT
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cutMachineStep_TIM9_Init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEPMOTOR_TIMx_Init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Callback_TIM9
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Callback
</UL>

<P><STRONG><a name="[ef]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 112 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_OC2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[3f]"></a>USART2_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = USART2_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; StmCom_ReceiveComData
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[146]"></a>USARTx_Init</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, bsp_usartx.o(i.USARTx_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USARTx_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_NVIC_DMAx_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeHardWare
</UL>

<P><STRONG><a name="[14]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>WORKFINISH_PRESS_DOWN_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(i.WORKFINISH_PRESS_DOWN_Handler))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.initializeHardWare)
</UL>
<P><STRONG><a name="[147]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[19c]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[b9]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateNode
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showList
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runCutMachine
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandStampSeq
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandStampACMotor
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandRightHobMotor
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandRightChamferMotor
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandPagingSeq
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandPagingConveyerMotor
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandPIDMotor
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandMachineStep
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandLeftHobMotor
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandLeftChamferMotor
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandHobMotor
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandFlotasmCutMotor
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCutStep
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCutMachineSeq
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listInit
</UL>

<P><STRONG><a name="[19d]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[19e]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[13e]"></a>__hardfp_sqrt</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, sqrt.o(i.__hardfp_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEPMOTOR_CerAxisMoveRel
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEPMOTOR_CerAxisMoveRel_CutTim9
</UL>

<P><STRONG><a name="[19f]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1a0]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1a1]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[149]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>

<P><STRONG><a name="[14f]"></a>add_program</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, commandutil.o(i.add_program))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = add_program &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_cmd
</UL>

<P><STRONG><a name="[84]"></a>appTaskStart</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, main.o(i.appTaskStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = appTaskStart &rArr; OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[b5]"></a>arg_cmd</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, commandutil.o(i.arg_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = arg_cmd &rArr; parse_cmd &rArr; create_program &rArr; calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandScan
</UL>

<P><STRONG><a name="[169]"></a>arg_num</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, commandutil.o(i.arg_num))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_program
</UL>

<P><STRONG><a name="[174]"></a>button_attach</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_key.o(i.button_attach))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeHardWare
</UL>

<P><STRONG><a name="[159]"></a>button_handler</STRONG> (Thumb, 544 bytes, Stack size 16 bytes, bsp_key.o(i.button_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = button_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_ticks
</UL>

<P><STRONG><a name="[156]"></a>button_init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, bsp_key.o(i.button_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = button_init
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeHardWare
</UL>

<P><STRONG><a name="[175]"></a>button_start</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, bsp_key.o(i.button_start))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeHardWare
</UL>

<P><STRONG><a name="[158]"></a>button_ticks</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp_key.o(i.button_ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = button_ticks &rArr; button_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comTask
</UL>

<P><STRONG><a name="[77]"></a>comTask</STRONG> (Thumb, 180 bytes, Stack size 0 bytes, main.o(i.comTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = comTask &rArr; CertificateCom_Scan &rArr; StmCom_ScanTask &rArr; StmCom_InScan
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_ticks
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CertificateCom_Scan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.appTaskStart)
</UL>
<P><STRONG><a name="[6]"></a>commandCutMachineSeq</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, commandcore.o(i.commandCutMachineSeq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = commandCutMachineSeq &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stringint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commandlist.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>commandCutStep</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, commandcore.o(i.commandCutStep))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = commandCutStep &rArr; STEPMOTOR_CerAxisMoveRel_CutTim9 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEPMOTOR_CerAxisMoveRel_CutTim9
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stringint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commandlist.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>commandFlotasmCutMotor</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, commandcore.o(i.commandFlotasmCutMotor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = commandFlotasmCutMotor &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlFlotasmCutMotor
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stringint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commandlist.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>commandHobMotor</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, commandcore.o(i.commandHobMotor))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = commandHobMotor &rArr; controlHobMotor &rArr; hobMotorIO
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlHobMotor
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stringint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commandlist.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>commandLeftChamferMotor</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, commandcore.o(i.commandLeftChamferMotor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = commandLeftChamferMotor &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlChamferMotor
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stringint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commandlist.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>commandLeftHobMotor</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, commandcore.o(i.commandLeftHobMotor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = commandLeftHobMotor &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stringint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commandlist.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>commandMachineStep</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, commandcore.o(i.commandMachineStep))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = commandMachineStep &rArr; STEPMOTOR_CerAxisMoveRel &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEPMOTOR_CerAxisMoveRel
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stringint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commandlist.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>commandPIDMotor</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, commandcore.o(i.commandPIDMotor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = commandPIDMotor &rArr; controlPIDPagingMachineStep &rArr; HAL_TIM_OC_Start_IT &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlPIDPagingMachineStep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commandlist.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>commandPagingConveyerMotor</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, commandcore.o(i.commandPagingConveyerMotor))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = commandPagingConveyerMotor &rArr; controlPagingConveyerMotor &rArr; pagingConveyerMotorIO
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlPagingConveyerMotor
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stringint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commandlist.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>commandPagingSeq</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, commandcore.o(i.commandPagingSeq))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = commandPagingSeq &rArr; controlPagingMachine &rArr; controlHobMotor &rArr; hobMotorIO
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlPagingMachine
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stringint
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commandlist.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>commandRightChamferMotor</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, commandcore.o(i.commandRightChamferMotor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = commandRightChamferMotor &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stringint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commandlist.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>commandRightHobMotor</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, commandcore.o(i.commandRightHobMotor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = commandRightHobMotor &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stringint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commandlist.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>commandStampACMotor</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, commandcore.o(i.commandStampACMotor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = commandStampACMotor &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlStampACMotor
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stringint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commandlist.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>commandStampSeq</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, commandcore.o(i.commandStampSeq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = commandStampSeq &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commandlist.o(.data)
</UL>
<P><STRONG><a name="[a9]"></a>continuousCutMem</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, runcutmachine.o(i.continuousCutMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = continuousCutMem &rArr; STEPMOTOR_CerAxisMoveRel_CutTim9 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEPMOTOR_CerAxisMoveRel_CutTim9
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUTBTN_LONG_PRESS_Handler
</UL>

<P><STRONG><a name="[138]"></a>continuousPlasticMem</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, runpagingmachine.o(i.continuousPlasticMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = continuousPlasticMem &rArr; STEPMOTOR_CerAxisMoveRel &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEPMOTOR_CerAxisMoveRel
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLASTICBTN_LONG_PRESS_Handler
</UL>

<P><STRONG><a name="[160]"></a>controlChamferMotor</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, motor.o(i.controlChamferMotor))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandLeftChamferMotor
</UL>

<P><STRONG><a name="[136]"></a>controlCutMachine</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, runcutmachine.o(i.controlCutMachine))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAPEREXITBTN_PRESS_DOWN_Handler
</UL>

<P><STRONG><a name="[163]"></a>controlCutMachineSpeed</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, runcutmachine.o(i.controlCutMachineSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = controlCutMachineSpeed &rArr; STEPMOTOR_CerAxisMoveRel_CutTim9 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEPMOTOR_CerAxisMoveRel_CutTim9
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runCutMachine
</UL>

<P><STRONG><a name="[15f]"></a>controlFlotasmCutMotor</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, motor.o(i.controlFlotasmCutMotor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = controlFlotasmCutMotor
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runCutMachine
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandFlotasmCutMotor
</UL>

<P><STRONG><a name="[15c]"></a>controlHobMotor</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, motor.o(i.controlHobMotor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = controlHobMotor &rArr; hobMotorIO
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hobMotorIO
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlPagingMachine
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closePagingMachine
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandHobMotor
</UL>

<P><STRONG><a name="[161]"></a>controlPIDPagingMachineStep</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, pid.o(i.controlPIDPagingMachineStep))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = controlPIDPagingMachineStep &rArr; HAL_TIM_OC_Start_IT &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Start_IT
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_PIDStruct
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandPIDMotor
</UL>

<P><STRONG><a name="[15b]"></a>controlPagingConveyerMotor</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, motor.o(i.controlPagingConveyerMotor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = controlPagingConveyerMotor &rArr; pagingConveyerMotorIO
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pagingConveyerMotorIO
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runPagingMachine
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closePagingMachine
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandPagingConveyerMotor
</UL>

<P><STRONG><a name="[135]"></a>controlPagingMachine</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, runpagingmachine.o(i.controlPagingMachine))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = controlPagingMachine &rArr; controlHobMotor &rArr; hobMotorIO
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlHobMotor
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlRollerPaper
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandPagingSeq
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAPEREXITBTN_PRESS_DOWN_Handler
</UL>

<P><STRONG><a name="[162]"></a>controlStampACMotor</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, motor.o(i.controlStampACMotor))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandStampACMotor
</UL>

<P><STRONG><a name="[b4]"></a>create_job</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, commandutil.o(i.create_job))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = create_job &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandScan
</UL>

<P><STRONG><a name="[168]"></a>create_program</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, commandutil.o(i.create_program))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = create_program &rArr; calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_num
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_cmd
</UL>

<P><STRONG><a name="[16a]"></a>cutMachineStep_TIM9_Init</STRONG> (Thumb, 234 bytes, Stack size 56 bytes, bsp_stepmotor.o(i.cutMachineStep_TIM9_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = cutMachineStep_TIM9_Init &rArr; PagingMachinePIDStep_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Stop_IT
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PagingMachinePIDStep_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeHardWare
</UL>

<P><STRONG><a name="[75]"></a>cutTask</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(i.cutTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = cutTask &rArr; runCutMachine &rArr; runFlotasmCutMotor &rArr; STEPMOTOR_CerAxisMoveRel &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runCutMachine
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.appTaskStart)
</UL>
<P><STRONG><a name="[b7]"></a>destroy_job</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, commandutil.o(i.destroy_job))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = destroy_job &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandScan
</UL>

<P><STRONG><a name="[74]"></a>fputc</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, bsp_usartx.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[151]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;popFront
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_cmd
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_program
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_job
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_cmd
</UL>

<P><STRONG><a name="[164]"></a>hobMotorIO</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, bsp_bdcmotor.o(i.hobMotorIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hobMotorIO
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runHobMotor
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlHobMotor
</UL>

<P><STRONG><a name="[16e]"></a>initMotorIOPushOut</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, bsp_bdcmotor.o(i.initMotorIOPushOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = initMotorIOPushOut &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeHardWare
</UL>

<P><STRONG><a name="[16f]"></a>initMotorPWM</STRONG> (Thumb, 650 bytes, Stack size 104 bytes, bsp_bdcmotor.o(i.initMotorPWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = initMotorPWM &rArr; HAL_TIM_ConfigClockSource &rArr; TIM_TI2_ConfigInputStage
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Stop
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_PWMN_Stop
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_ConfigBreakDeadTime
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeHardWare
</UL>

<P><STRONG><a name="[171]"></a>initReadTemperature</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, max6675.o(i.initReadTemperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = initReadTemperature &rArr; initMax6675 &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initMax6675
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initHC4053
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeHardWare
</UL>

<P><STRONG><a name="[172]"></a>initSensorIO</STRONG> (Thumb, 712 bytes, Stack size 32 bytes, bsp_sensor.o(i.initSensorIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = initSensorIO &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeHardWare
</UL>

<P><STRONG><a name="[177]"></a>insertList</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, steplinkedlist.o(i.insertList))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = insertList &rArr; CreateNode &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateNode
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushBack
</UL>

<P><STRONG><a name="[176]"></a>listInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, steplinkedlist.o(i.listInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = listInit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeHardWare
</UL>

<P><STRONG><a name="[6a]"></a>main</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = main &rArr; initializeHardWare &rArr; SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeHardWare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[96]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateNode
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_cmd
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_program
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_program
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_job
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_cmd
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listInit
</UL>

<P><STRONG><a name="[aa]"></a>manualCutMem</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, runcutmachine.o(i.manualCutMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = manualCutMem &rArr; STEPMOTOR_CerAxisMoveRel_CutTim9 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEPMOTOR_CerAxisMoveRel_CutTim9
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUTBTN_PRESS_DOWN_Handler
</UL>

<P><STRONG><a name="[139]"></a>manualPlasticMem</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, runpagingmachine.o(i.manualPlasticMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = manualPlasticMem &rArr; STEPMOTOR_CerAxisMoveRel &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEPMOTOR_CerAxisMoveRel
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLASTICBTN_PRESS_DOWN_Handler
</UL>

<P><STRONG><a name="[166]"></a>pagingConveyerMotorIO</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, bsp_bdcmotor.o(i.pagingConveyerMotorIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pagingConveyerMotorIO
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runPagingConveyerMotor
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlPagingConveyerMotor
</UL>

<P><STRONG><a name="[76]"></a>pagingTask</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(i.pagingTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = pagingTask &rArr; runPagingMachine &rArr; runRollerPaper &rArr; STEPMOTOR_CerAxisMoveRel &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runPagingMachine
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.appTaskStart)
</UL>
<P><STRONG><a name="[155]"></a>parse_cmd</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, commandutil.o(i.parse_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = parse_cmd &rArr; create_program &rArr; calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_program
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_program
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_cmd
</UL>

<P><STRONG><a name="[179]"></a>popFront</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, steplinkedlist.o(i.popFront))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = popFront &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runCutMachine
</UL>

<P><STRONG><a name="[17a]"></a>pushBack</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, steplinkedlist.o(i.pushBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = pushBack &rArr; insertList &rArr; CreateNode &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insertList
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;end
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runCutMachine
</UL>

<P><STRONG><a name="[78]"></a>readCutButtonIO</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_key.o(i.readCutButtonIO))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.initializeHardWare)
</UL>
<P><STRONG><a name="[17c]"></a>readFlotasmCutMotor</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, motor.o(i.readFlotasmCutMotor))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runCutMachine
</UL>

<P><STRONG><a name="[7b]"></a>readPaperExitButtonIO</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_key.o(i.readPaperExitButtonIO))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.initializeHardWare)
</UL>
<P><STRONG><a name="[79]"></a>readStampButtonIO</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_key.o(i.readStampButtonIO))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.initializeHardWare)
</UL>
<P><STRONG><a name="[7a]"></a>readWorkFinishButtonIO</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_key.o(i.readWorkFinishButtonIO))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.initializeHardWare)
</UL>
<P><STRONG><a name="[17f]"></a>runCutFlasmPostionSensor</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, runcutmachine.o(i.runCutFlasmPostionSensor))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runCutMachine
</UL>

<P><STRONG><a name="[16b]"></a>runCutMachine</STRONG> (Thumb, 586 bytes, Stack size 16 bytes, runcutmachine.o(i.runCutMachine))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = runCutMachine &rArr; runFlotasmCutMotor &rArr; STEPMOTOR_CerAxisMoveRel &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signalStability
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showList
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runFlotasmCutMotor
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFlotasmCutMotor
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushBack
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;popFront
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlFlotasmCutMotor
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runCutFlasmPostionSensor
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlCutMachineSpeed
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CutMachineSpecialHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cutTask
</UL>

<P><STRONG><a name="[17e]"></a>runFlotasmCutMotor</STRONG> (Thumb, 326 bytes, Stack size 16 bytes, motor.o(i.runFlotasmCutMotor))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = runFlotasmCutMotor &rArr; STEPMOTOR_CerAxisMoveRel &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEPMOTOR_CerAxisMoveRel
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runCutMachine
</UL>

<P><STRONG><a name="[181]"></a>runHobMotor</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, motor.o(i.runHobMotor))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = runHobMotor &rArr; hobMotorIO
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hobMotorIO
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runPagingMachine
</UL>

<P><STRONG><a name="[182]"></a>runPagingConveyerMotor</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, motor.o(i.runPagingConveyerMotor))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = runPagingConveyerMotor &rArr; pagingConveyerMotorIO
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pagingConveyerMotorIO
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runPagingMachine
</UL>

<P><STRONG><a name="[178]"></a>runPagingMachine</STRONG> (Thumb, 448 bytes, Stack size 16 bytes, runpagingmachine.o(i.runPagingMachine))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = runPagingMachine &rArr; runRollerPaper &rArr; STEPMOTOR_CerAxisMoveRel &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runPagingConveyerMotor
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runHobMotor
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlPagingConveyerMotor
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEPMOTOR_CerAxisMoveRel
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runRollerPaper
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runPagingPaper
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readPagingPaper
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlPagingPaperStepTwo
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlPagingPaper
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closePagingMachine
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signalStability
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pagingTask
</UL>

<P><STRONG><a name="[85]"></a>sensorCutFlotasmPostion</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp_sensor.o(i.sensorCutFlotasmPostion))
<BR>[Address Reference Count : 1]<UL><LI> runcutmachine.o(i.runCutMachine)
</UL>
<P><STRONG><a name="[86]"></a>sensorCutLeftFlotasm</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp_sensor.o(i.sensorCutLeftFlotasm))
<BR>[Address Reference Count : 1]<UL><LI> runcutmachine.o(i.runCutMachine)
</UL>
<P><STRONG><a name="[89]"></a>sensorCutMachineBehind</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp_sensor.o(i.sensorCutMachineBehind))
<BR>[Address Reference Count : 1]<UL><LI> runcutmachine.o(i.runCutMachine)
</UL>
<P><STRONG><a name="[88]"></a>sensorCutMachineFront</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp_sensor.o(i.sensorCutMachineFront))
<BR>[Address Reference Count : 1]<UL><LI> runcutmachine.o(i.runCutMachine)
</UL>
<P><STRONG><a name="[87]"></a>sensorCutRightFlotasm</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp_sensor.o(i.sensorCutRightFlotasm))
<BR>[Address Reference Count : 1]<UL><LI> runcutmachine.o(i.runCutMachine)
</UL>
<P><STRONG><a name="[8a]"></a>sensorPagingFrictionOrigin</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bsp_sensor.o(i.sensorPagingFrictionOrigin))
<BR>[Address Reference Count : 1]<UL><LI> runpagingmachine.o(i.runPagingMachine)
</UL>
<P><STRONG><a name="[8e]"></a>sensorPagingFrictionOutFour</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_sensor.o(i.sensorPagingFrictionOutFour))
<BR>[Address Reference Count : 1]<UL><LI> runpagingmachine.o(i.runPagingMachine)
</UL>
<P><STRONG><a name="[8b]"></a>sensorPagingFrictionOutOne</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_sensor.o(i.sensorPagingFrictionOutOne))
<BR>[Address Reference Count : 1]<UL><LI> runpagingmachine.o(i.runPagingMachine)
</UL>
<P><STRONG><a name="[8d]"></a>sensorPagingFrictionOutThree</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_sensor.o(i.sensorPagingFrictionOutThree))
<BR>[Address Reference Count : 1]<UL><LI> runpagingmachine.o(i.runPagingMachine)
</UL>
<P><STRONG><a name="[8c]"></a>sensorPagingFrictionOutTwo</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_sensor.o(i.sensorPagingFrictionOutTwo))
<BR>[Address Reference Count : 1]<UL><LI> runpagingmachine.o(i.runPagingMachine)
</UL>
<P><STRONG><a name="[8f]"></a>sensorPagingRollerOut</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bsp_sensor.o(i.sensorPagingRollerOut))
<BR>[Address Reference Count : 1]<UL><LI> runpagingmachine.o(i.runPagingMachine)
</UL>
<P><STRONG><a name="[17d]"></a>showList</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, steplinkedlist.o(i.showList))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = showList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runCutMachine
</UL>

<P><STRONG><a name="[180]"></a>signalStability</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, bsp_sensor.o(i.signalStability))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = signalStability
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runPagingMachine
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runCutMachine
</UL>

<P><STRONG><a name="[137]"></a>stopPlasticMem</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, runpagingmachine.o(i.stopPlasticMem))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLASTICBBTN_PRESS_UP_Handler
</UL>

<P><STRONG><a name="[15e]"></a>stringint</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, commandcore.o(i.stringint))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stringint
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandStampACMotor
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandRightHobMotor
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandRightChamferMotor
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandPagingSeq
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandPagingConveyerMotor
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandMachineStep
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandLeftHobMotor
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandLeftChamferMotor
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandHobMotor
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandFlotasmCutMotor
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCutStep
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCutMachineSeq
</UL>

<P><STRONG><a name="[0]"></a>text</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, commandcore.o(i.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = text &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commandlist.o(.data)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[ba]"></a>CutMachineSpecialHandle</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, runcutmachine.o(i.CutMachineSpecialHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = CutMachineSpecialHandle &rArr; STEPMOTOR_CerAxisMoveRel_CutTim9 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEPMOTOR_CerAxisMoveRel_CutTim9
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runCutMachine
</UL>

<P><STRONG><a name="[15a]"></a>closePagingMachine</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, runpagingmachine.o(i.closePagingMachine))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = closePagingMachine &rArr; controlPagingConveyerMotor &rArr; pagingConveyerMotorIO
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlPagingConveyerMotor
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlHobMotor
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closeRollerPaper
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runPagingMachine
</UL>

<P><STRONG><a name="[15d]"></a>closeRollerPaper</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, runpagingmachine.o(i.closeRollerPaper))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closePagingMachine
</UL>

<P><STRONG><a name="[184]"></a>controlPagingPaper</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, runpagingmachine.o(i.controlPagingPaper))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runPagingMachine
</UL>

<P><STRONG><a name="[183]"></a>controlPagingPaperStepTwo</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, runpagingmachine.o(i.controlPagingPaperStepTwo))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runPagingMachine
</UL>

<P><STRONG><a name="[167]"></a>controlRollerPaper</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, runpagingmachine.o(i.controlRollerPaper))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlPagingMachine
</UL>

<P><STRONG><a name="[185]"></a>readPagingPaper</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, runpagingmachine.o(i.readPagingPaper))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runPagingMachine
</UL>

<P><STRONG><a name="[186]"></a>runPagingPaper</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, runpagingmachine.o(i.runPagingPaper))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = runPagingPaper &rArr; STEPMOTOR_CerAxisMoveRel &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEPMOTOR_CerAxisMoveRel
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runPagingMachine
</UL>

<P><STRONG><a name="[187]"></a>runRollerPaper</STRONG> (Thumb, 590 bytes, Stack size 16 bytes, runpagingmachine.o(i.runRollerPaper))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = runRollerPaper &rArr; STEPMOTOR_CerAxisMoveRel &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEPMOTOR_CerAxisMoveRel
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runPagingMachine
</UL>

<P><STRONG><a name="[13a]"></a>PagingMachinePIDStep_GPIO_Init</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, bsp_stepmotor.o(i.PagingMachinePIDStep_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PagingMachinePIDStep_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cutMachineStep_TIM9_Init
</UL>

<P><STRONG><a name="[13f]"></a>STEPMOTOR_GPIO_Init</STRONG> (Thumb, 274 bytes, Stack size 32 bytes, bsp_stepmotor.o(i.STEPMOTOR_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = STEPMOTOR_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEPMOTOR_TIMx_Init
</UL>

<P><STRONG><a name="[108]"></a>MX_NVIC_DMAx_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bsp_usartx.o(i.MX_NVIC_DMAx_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MX_NVIC_DMAx_Init &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTx_Init
</UL>

<P><STRONG><a name="[142]"></a>StmCom_InScan</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, bsp_usartx.o(i.StmCom_InScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = StmCom_InScan
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StmCom_ScanTask
</UL>

<P><STRONG><a name="[cc]"></a>NVIC_GetPriorityGrouping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[cd]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[c6]"></a>DMA_CalcBaseAndBitshift</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.DMA_CalcBaseAndBitshift))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[c5]"></a>DMA_CheckFifoParam</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.DMA_CheckFifoParam))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[da]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_ETR_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[dc]"></a>TIM_ITRx_SetConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.TIM_ITRx_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[ee]"></a>TIM_OC1_SetConfig</STRONG> (Thumb, 102 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_OC1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[f0]"></a>TIM_OC3_SetConfig</STRONG> (Thumb, 110 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_OC3_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC3_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[f1]"></a>TIM_OC4_SetConfig</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_OC4_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC4_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[db]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_TI1_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[dd]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_TI2_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TI2_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[d5]"></a>TIM_CCxNChannelCmd</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, stm32f4xx_hal_tim_ex.o(i.TIM_CCxNChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_CCxNChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_PWMN_Stop
</UL>

<P><STRONG><a name="[70]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[fa]"></a>UART_EndRxTransfer</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[fe]"></a>UART_EndTransmit_IT</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.UART_EndTransmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_EndTransmit_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[f9]"></a>UART_Receive_IT</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; StmCom_ReceiveComData
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[101]"></a>UART_SetConfig</STRONG> (Thumb, 864 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UART_SetConfig &rArr; HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[fd]"></a>UART_Transmit_IT</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.UART_Transmit_IT))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[106]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[143]"></a>SystemClock_Config</STRONG> (Thumb, 160 bytes, Stack size 80 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeHardWare
</UL>

<P><STRONG><a name="[173]"></a>initializeHardWare</STRONG> (Thumb, 260 bytes, Stack size 8 bytes, main.o(i.initializeHardWare))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = initializeHardWare &rArr; SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Start
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENCODER_TIMx_Init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initMotorPWM
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initMotorIOPushOut
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandCallBackInit
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTx_Init
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cutMachineStep_TIM9_Init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEPMOTOR_TIMx_Init
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSensorIO
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_start
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_init
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_attach
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_GPIO_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listInit
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initReadTemperature
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_PIDStruct
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CertificateCom_Init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17b]"></a>end</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, steplinkedlist.o(i.end))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushBack
</UL>

<P><STRONG><a name="[16c]"></a>initHC4053</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, max6675.o(i.initHC4053))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = initHC4053 &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initReadTemperature
</UL>

<P><STRONG><a name="[16d]"></a>initMax6675</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, max6675.o(i.initMax6675))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = initMax6675 &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initReadTemperature
</UL>

<P><STRONG><a name="[6e]"></a>CertificateCom_ReceiveMessage</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, usecom.o(i.CertificateCom_ReceiveMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CertificateCom_ReceiveMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usecom.o(i.CertificateCom_Init)
</UL>
<P><STRONG><a name="[10e]"></a>OS_InitEventList</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, os_core.o(i.OS_InitEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_InitEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[10b]"></a>OS_InitMisc</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, os_core.o(i.OS_InitMisc))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[10c]"></a>OS_InitRdyList</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, os_core.o(i.OS_InitRdyList))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[10d]"></a>OS_InitTCBList</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, os_core.o(i.OS_InitTCBList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_InitTCBList
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[110]"></a>OS_InitTaskIdle</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, os_core.o(i.OS_InitTaskIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = OS_InitTaskIdle &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[111]"></a>OS_InitTaskStat</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, os_core.o(i.OS_InitTaskStat))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = OS_InitTaskStat &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[114]"></a>OS_SchedNew</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, os_core.o(i.OS_SchedNew))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
</UL>

<P><STRONG><a name="[14a]"></a>_fp_digits</STRONG> (Thumb, 334 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[148]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[14d]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[14c]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
